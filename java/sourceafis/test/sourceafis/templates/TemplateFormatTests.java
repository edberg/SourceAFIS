package sourceafis.templates;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;

import org.junit.Test;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;


public class TemplateFormatTests {
	File folderJavaProject = new File(System.getProperty("user.dir"));
	File folderRoot = new File(new File(folderJavaProject, ".."), "..");
	File folderJavaTestData = new File(new File(folderRoot, "Data"),
			"JavaTestData");
	File folderIsoTemplates = new File(new File(folderRoot, "Data"),
			"IsoTemplates");

	/*
	 * Verifies compatability of - Import ISOFormat - Import XmlFormat - Export
	 * XmlFormat
	 */
	@Test
	public void testISOFormatToXMLFormat() throws FileNotFoundException {
		FileInputStream fis = new FileInputStream(new File(folderIsoTemplates,
				"1_1.ist"));
		IsoFormat iso1 = new IsoFormat();
		byte[] data = iso1.Deserialize(fis);
		TemplateBuilder builder = iso1.Import(data);
		// Export as XmlFormat
		XmlFormat xml = new XmlFormat();
		Element template1 = xml.Export(builder);

		// compare the template with the template generated by c#
		FileInputStream fis2 = new FileInputStream(new File(folderJavaTestData,
				"1_1.xml"));
		XmlFormat xml2 = new XmlFormat();
		Element template2 = xml2.Deserialize(fis2);
		assert (compareXmlTemplates(template1, template2));

	}

	/*
	 * Compatability Test for - Compact Template Export with template created by c#
	 * 
	 */
	@Test
	public void testExportCompatctTemplate() throws IOException {
		FileInputStream fis = new FileInputStream(new File(folderIsoTemplates,
				"1_1.ist"));
		IsoFormat iso1 = new IsoFormat();
		byte[] data = iso1.Deserialize(fis);
		TemplateBuilder builder = iso1.Import(data);

		CompactFormat compact = new CompactFormat();
		byte[] comapactTemplate = compact.Export(builder);

		FileInputStream fis2 = new FileInputStream(new File(folderJavaTestData,
				"1_1.compact"));
		byte[] compatTemplate2 = new byte[fis2.available()];
		fis2.read(compatTemplate2);
		assert (Arrays.equals(comapactTemplate, compatTemplate2));
	}

	/*
	 * Compatability Test for ISOFormat 
	 */
	@Test
	public void testISOFormat() throws FileNotFoundException {
		 FileInputStream fis=new FileInputStream(new
		 File(folderJavaTestData,"1_1.xml"));
		 
		 XmlFormat xmlFormat = new XmlFormat();
		 Element element1=xmlFormat.Deserialize(fis);
		 TemplateBuilder builder = xmlFormat.Import(element1);
		 
		 IsoFormat isoFormat=new IsoFormat();
		 byte[] isoTemplate = isoFormat.Export(builder);
		
		 TemplateBuilder builder2 = isoFormat.Import(isoTemplate);
		 Element element2=xmlFormat.Export(builder2);
		 assert (compareXmlTemplates(element1, element2));
	}
	/*
	 * Compatability Test for CompactFormat  
	 */
	@Test
	public void testCompactFormat() throws FileNotFoundException {
		 FileInputStream fis=new FileInputStream(new
		 File(folderJavaTestData,"1_1.xml"));
		 
		 XmlFormat xmlFormat = new XmlFormat();
		 Element element1=xmlFormat.Deserialize(fis);
		 TemplateBuilder builder = xmlFormat.Import(element1);
		 
		 CompactFormat compactFormat=new CompactFormat();
		 byte[] compactTemplate = compactFormat.Export(builder);
		
		 TemplateBuilder builder2 = compactFormat.Import(compactTemplate);
		 Element element2=xmlFormat.Export(builder2);
		 assert (compareXmlTemplates(element1, element2));
	}	

	/*
	 * Utility function to compare XmlTemplates
	 */
	public boolean compareXmlTemplates(Element template1, Element template2) {

		// template1.getAttribute("Version");
		if (!template1.getAttribute("OriginalDpi").equals(
				template2.getAttribute("OriginalDpi")))
			return false;
		if (!template1.getAttribute("OriginalHeight").equals(
				template2.getAttribute("OriginalHeight")))
			return false;

		NodeList list1 = template1.getElementsByTagName("Minutia");
		NodeList list2 = template2.getElementsByTagName("Minutia");

		if (list1.getLength() != list2.getLength())
			return false;

		for (int x = 0; x < list1.getLength(); x++) {
			Element node1 = (Element) list1.item(x);
			Element node2 = (Element) list2.item(x);
			if (!node1.getAttribute("X").equals(node2.getAttribute("X")))
				return false;
			if (!node1.getAttribute("Y").equals(node2.getAttribute("Y")))
				return false;
			if (!node1.getAttribute("Direction").equals(
					node2.getAttribute("Direction")))
				return false;
			if (!node1.getAttribute("Type").equals(node2.getAttribute("Type")))
				return false;
		}
		return true;
	}

}
